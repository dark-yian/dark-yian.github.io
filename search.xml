<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2022/06/20/C%E5%AF%B9%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="记录第一次对文件进行的一些操作"><a href="#记录第一次对文件进行的一些操作" class="headerlink" title="记录第一次对文件进行的一些操作"></a>记录第一次对文件进行的一些操作</h3><p>​	  在一指定路径下创建一个txt，并录入任意数量人的年龄和姓名，进行遍历</p>
<h6 id="c代码实现"><a href="#c代码实现" class="headerlink" title="c代码实现"></a>c代码实现</h6><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;errno.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">files</span></span><br><span class="hljs-class">&#123;</span><br>	<span class="hljs-type">int</span> ages;<br>	<span class="hljs-type">char</span> name[<span class="hljs-number">32</span>];<br>&#125;files,*pfiles;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">input_files</span><span class="hljs-params">(FILE **fp1)</span><br>&#123;<br>	files input=&#123;<span class="hljs-number">0</span>&#125;;<br><br>	<span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>	&#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;年龄:&quot;</span>);<br>		scanf_s(<span class="hljs-string">&quot;%d&quot;</span>,&amp;(input.ages));<br>		<span class="hljs-keyword">if</span>(input.ages==<span class="hljs-number">0</span>)<span class="hljs-comment">//设置循环结束条件</span><br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名:&quot;</span>);<br>		scanf_s(<span class="hljs-string">&quot;%s&quot;</span>,input.name,<span class="hljs-number">31</span>);<br>		fwrite(&amp;input,<span class="hljs-keyword">sizeof</span>(files),<span class="hljs-number">1</span>,*fp1);<span class="hljs-comment">//录入数据</span><br>	&#125;<br>	fclose(*fp1);<br><br>	<span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">output_files</span><span class="hljs-params">(FILE **fp2)</span><br>&#123;<br>	files output=&#123;<span class="hljs-number">0</span>&#125;;<br>	<span class="hljs-type">size_t</span> check=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//X:\\XXXXXX\\XXXX.txt是文件路径</span><br>	<span class="hljs-type">errno_t</span> err=fopen_s(*fp2,<span class="hljs-string">&quot;X:\\XXXXXX\\XXXX.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-comment">//以读的方式打开</span><br>	<span class="hljs-keyword">if</span>(err==<span class="hljs-number">0</span>)<br>	&#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;成功打开！\n&quot;</span>);<br>	&#125;<br>	<span class="hljs-keyword">while</span>(!feof(*fp2))<span class="hljs-comment">//遍历操作</span><br>	&#123;<br>		check=fread(&amp;output,<span class="hljs-keyword">sizeof</span>(files),<span class="hljs-number">1</span>,*fp2);<br>		<span class="hljs-keyword">if</span>(check==<span class="hljs-number">0</span>)<span class="hljs-comment">//fread()函数读取不成功或读到文件末尾返回0，作为循环结束条件</span><br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ages:%d names:%s\n&quot;</span>,output.ages,output.name);<br>	&#125;<br>	fclose(*fp2);<br><br>	<span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>	FILE *fp=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//X:\\XXXXXX\\XXXX.txt是文件路径</span><br>	<span class="hljs-type">errno_t</span> err=fopen_s(&amp;fp,<span class="hljs-string">&quot;X:\\XXXXXX\\XXXX.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>);<br>	<span class="hljs-comment">//w,a,w+,a+都可以在没有对应打开文件的情况下创建该文件</span><br>	<span class="hljs-keyword">if</span>(err!=<span class="hljs-number">0</span>||fp==<span class="hljs-literal">NULL</span>)<br>	&#123; <br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建失败！&quot;</span>);<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>	&#125;<br>	<span class="hljs-comment">//此处不关闭文件，等把数据录入之后再关闭</span><br>	input_files(&amp;fp);<br>	output_files(&amp;fp);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>​		用010editor打开并以十六进制查看，如下图</p>
<p>!<img  src="//tvax4.sinaimg.cn/large/0081aNtNly1h3ey41k3alj30km05mwiq.jpg"  ><span class="image-caption">image-20220619215757947</span></p>
<p>​        从图中可以明显看到是有很多的无用数据，因为我们设置的name数组是要比实际名字占用的内存大很多，会造成空间浪费。</p>
<p>​		从这方面考虑，年龄用一个字节就已经足够表示，用四个字节的int类型显得有点多余</p>
<p>​		我们可以在录入一个整数来记录每个名字的长度</p>
<h6 id="基于以上，用c代码实现"><a href="#基于以上，用c代码实现" class="headerlink" title="基于以上，用c代码实现"></a>基于以上，用c代码实现</h6><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">files</span></span><br><span class="hljs-class">&#123;</span><br>	<span class="hljs-type">char</span> ages;                             <span class="hljs-comment">//char占一个字节，省空间</span><br>	<span class="hljs-type">char</span> name[<span class="hljs-number">32</span>];<br>&#125;files,*pfiles;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">input_files</span><span class="hljs-params">(FILE **fp1)</span>               <span class="hljs-comment">//传指针</span><br>&#123;<br>	files input=&#123;<span class="hljs-number">0</span>&#125;;<br>	<span class="hljs-type">char</span> len=<span class="hljs-number">0</span>;                            <span class="hljs-comment">//len也设置为char类型</span><br><br>	<span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>	&#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;年龄:&quot;</span>);<br>		scanf_s(<span class="hljs-string">&quot;%d&quot;</span>,&amp;(input.ages));<br>		<span class="hljs-keyword">if</span>(input.ages==<span class="hljs-number">0</span>)                  <span class="hljs-comment">//设置循环结束条件</span><br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名:&quot;</span>);<br>		scanf_s(<span class="hljs-string">&quot;%s&quot;</span>,input.name,<span class="hljs-number">31</span>);<br>		len=<span class="hljs-built_in">strlen</span>(input.name);            <span class="hljs-comment">//用len记录名字的长度</span><br>		fwrite(&amp;len,<span class="hljs-keyword">sizeof</span>(len),<span class="hljs-number">1</span>,*fp1);<br>		fwrite(&amp;(input.ages),<span class="hljs-keyword">sizeof</span>(input.ages),<span class="hljs-number">1</span>,*fp1);<span class="hljs-comment">//录入年龄(char类型比int类型小3个Byte)</span><br>		fwrite(input.name,len,<span class="hljs-number">1</span>,*fp1);     <span class="hljs-comment">//只存len个字节，后面空闲的不存</span><br>	&#125;<br>	fclose(*fp1);<br><br>	<span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">output_files</span><span class="hljs-params">(FILE **fp2)</span>              <span class="hljs-comment">//传指针</span><br>&#123;<br>	files output=&#123;<span class="hljs-number">0</span>&#125;;<br>	<span class="hljs-type">size_t</span> check=<span class="hljs-number">0</span>;<br>	<span class="hljs-type">char</span> len=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//X:\\XXXXXX\\XXXX.txt是文件路径</span><br>	<span class="hljs-type">errno_t</span> err=fopen_s(*fp2,<span class="hljs-string">&quot;X:\\XXXXXX\\XXXX.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-comment">//以读的方式打开</span><br>	<span class="hljs-keyword">if</span>(err==<span class="hljs-number">0</span>)<br>	&#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;成功打开！\n&quot;</span>);<br>	&#125;<br>	<span class="hljs-comment">//遍历操作</span><br>	<span class="hljs-keyword">while</span>(!feof(*fp2))                      <span class="hljs-comment">//cheak要有，只有feof判断貌似无法正常运行，大佬随意</span><br>	&#123;<br>		check=fread(&amp;len,<span class="hljs-keyword">sizeof</span>(len),<span class="hljs-number">1</span>,*fp2);<br>		<span class="hljs-keyword">if</span>(check==<span class="hljs-number">0</span>)                        <span class="hljs-comment">//fread()函数读取不成功或读到文件末尾返回0，作为循环结束条件</span><br>			<span class="hljs-keyword">break</span>;<br>		fread(&amp;output.ages,<span class="hljs-keyword">sizeof</span>(output.ages),<span class="hljs-number">1</span>,*fp2);<br>		fread(output.name,len,<span class="hljs-number">1</span>,*fp2);<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ages:%d names:%s\n&quot;</span>,output.ages,output.name);<br>	&#125;<br>	fclose(*fp2);<br><br>	<span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>	FILE *fp=<span class="hljs-literal">NULL</span>;<br>	<span class="hljs-comment">//X:\\XXXXXX\\XXXX.txt是文件路径</span><br>	<span class="hljs-type">errno_t</span> err=fopen_s(&amp;fp,<span class="hljs-string">&quot;X:\\XXXXXX\\XXXX.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>);<br>	<span class="hljs-comment">//w,a,w+,a+都可以在没有对应打开文件的情况下创建该文件</span><br>	<span class="hljs-keyword">if</span>(err!=<span class="hljs-number">0</span>||fp==<span class="hljs-literal">NULL</span>)<br>	&#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建失败！&quot;</span>);<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>	&#125;<br>	<span class="hljs-comment">//此处不关闭文件，等把数据录入之后再关闭</span><br>	input_files(&amp;fp);<br>	output_files(&amp;fp);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>之后我们再用010Editor打开，如下图</p>
<p><img  src="//tva3.sinaimg.cn/large/0081aNtNly1h3ey4fzq7yj30kb03ata6.jpg"  ><span class="image-caption">image-20220619233728751</span></p>
<p>这样就完成了空间优化！</p>
<p>注意：文件打开和关闭要配套，不然会一直处于打开状态；</p>
<p>​            char类型可以以%d形式输出</p>
<p>​            feof()和cheak要配套使用，但用一个貌似不可以（欢迎大佬指正）</p>
]]></content>
  </entry>
</search>
